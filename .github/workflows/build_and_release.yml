name: Build and Release Executable

# This workflow is triggered on a 'push' event
# specifically when a tag matching the pattern 'v*.*.*' is created.
# This ensures that a new executable is built and released only for new versions.
on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - test-actions


jobs:
  build_sign_release:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      #####################################################################################
      ## --- BUILD --- (Using PyInstaller) ################################################
      #####################################################################################      
      - name: 🐍 Set up Python 3.13
        # Sets up the Python environment on the runner.
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: 📦 Install Poetry and Build Dependencies
        # A single step to install poetry, export dependencies from the lock file,
        # and install them along with PyInstaller.
        run: |
          pip install poetry
          poetry self add poetry-plugin-export
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          pip install -r requirements.txt

      - name: 🏗️ Build the executable with PyInstaller
        run: pyinstaller build/git_audit.spec

      #####################################################################################
      # --- SIGN --- (Using DigiCert Software Trust Manager) ##############################
      #####################################################################################
      - name: 🔏 Download DigiCert Tools
        uses: digicert/ssm-code-signing@v1.1.1
        with:
          force-download-tools: true

      - name: 🔐 Set up DigiCert Certificate
        # Use $TEMP for correct pathing in bash on Windows
        run: |
          echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > $TEMP/Certificate_pkcs12.p12
        shell: bash

      - name: Set Environment Variables for SMCTL 
        run: | 
          # Set the SM_HOST and SM_API_KEY
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV" 
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_FILE=/tmp/Certificate_pkcs12.p12" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV"
        shell: bash

      - name: ✍️ Sign the Executable      
        run: |
           # smctl now automatically reads all variables set in the previous step
           smctl healthcheck 
           smctl windows certsync --keypair-alias key_1368373973
           smctl sign --keypair-alias key_1368373973 --input dist/ukb_git_audit_tool.exe
        shell: bash

      #####################################################################################
      # --- RELEASE --- (Using GitHub Releases) ###########################################
      #####################################################################################

      - name: 🏷️ Get the release tag name
        id: get_version
        run: echo "TAG=$(echo ${{ github.ref }} | sed 's/refs\/tags\///g')" >> $GITHUB_OUTPUT
        shell: bash

      - name: 📤 Create GitHub Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          # Sets the release tag name and the human-readable release title.
          tag_name: ${{ steps.get_version.outputs.TAG }}
          name: Release ${{ steps.get_version.outputs.TAG }}
          body: |
            ## Automated Release Notes
            - A new version of the git-auditor executable has been built and attached.
            - This release corresponds to the tag ${{ steps.get_version.outputs.TAG }}.
          # Specifies which files to upload as release assets.
          files: |
            dist/ukb_git_audit_tool.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
